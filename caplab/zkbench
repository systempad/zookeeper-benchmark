#!/bin/bash

#
# The MIT License
#
# Copyright 2020 Systempad, LLC http://caplab.dev/
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the “Software”), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# @ file This script runs zkbench with settings specified in the caplab
#        config file. https://github.com/brownsys/zookeeper-benchmark

set -u

[[ $LAB_LOGLEVEL == trace ]] && set -o xtrace

declare -r CAPLIB=$LAB_MODULES_ROOT/caplib/current

source $CAPLIB/this.sh &&
    source $CAPLIB/cluster.sh &&
    source $CAPLIB/module.sh &&
    source $CAPLIB/nodes.sh &&
    source $LAB_MODULES_ROOT/labconfig/current/config.sh || exit

THIS_MODULE_ID=$(LAB-this_module) &&
    THIS_MODULE_DIR="$LAB_MODULES_ROOT/$(LAB-module_path $THIS_MODULE_ID)" ||
	exit
BENCHCONF=$THIS_MODULE_DIR/zkbench.conf
declare -r THIS_MODULE_ID THIS_MODULE_DIR BENCHCONF

# Write a config for brownsys/zookeeper-benchmark to stdout. The benchmark
# config contains the key=value pairs with the settings of this lab module
# followed by a list of ZooKeeper servers from the target lab cluster.
# ZooKeeper is expected to run on its standard port 2181.
#
# TODO: make module 'zookeeper' settings-aware so that we can read the
#       port number from its settings
write_config() {
    local settings target

    settings=$(LAB-get_module_settings $THIS_MODULE_ID) &&
	target=$(yq r - target <<<"$settings") || return

    if [[ $target ]]; then
	[[ $target =~ ^$LAB_CLUSTER_ID_RE$ ]] || {
	    >&2 echo "ERROR: module setting 'target' ($target) is not"\
		"a cluster id"
	    return 1
	}
    else
	>&2 echo "INFO: 'target' key not found in module settings."
	local this_cluster=$(LAB-this_cluster) || return
	[[ $this_cluster =~ ^.*/(.*)$ ]] &&
	    target="zookeeper/${BASH_REMATCH[1]}" || {
		>&2 echo "INTERNAL ERROR: invalid output '$this_cluster' from"\
		    "LAB-this_cluster()"
		return 1
	    }
	>&2 echo "INFO: defaulting to target $target"
    fi

    [[ -r $LAB_CLUSTER_NODES ]] || {
	>&2 echo "INTERNAL ERROR: cluster nodes file $LAB_CLUSTER_NODES"\
	    "is missing or not readable"
	return 1
    }

    awk -F ':[[:blank:]]+' '{
         if ($2 && $1 != "target" && $1 != "module") printf "%s=%s\n", $1, $2
    }' <<<"$settings"

    local target_found=
    declare -A node=([0]="$(LAB-node_attributes node)")
    while read -r $node; do
	[[ ${node[cluster]} == $target ]] || continue
	[[ ${node[id]} =~ ^$LAB_NODEID_REMATCH$ ]] || {
	    >&2 echo "ERROR: invalid node id '${node[id]}' for instance"\
		"${node[iid]} in cluster ${node[cluster]}"
	    return 1
	}
	echo "server.${BASH_REMATCH[2]}=${node[ip]}:2181"
	target_found=1
    done <$LAB_CLUSTER_NODES

    [[ $target_found ]] || {
	>&2 echo "ERROR: target cluster '$target' not found in"\
	    "the cluster nodes file $LAB_CLUSTER_NODES"
	return 1
    }
}

LAB-file_uptodate $BENCHCONF || write_config >$BENCHCONF ||\
    { rm -f $BENCHCONF; exit 1; }

logdir=$(awk -F = '{if ($1=="logdir") print $2}' $BENCHCONF)
[[ $logdir ]] || {
    >&2 echo "Log directory (logdir) setting is missing or invalid."
    exit 1
}

cd $logdir &&
    exec java -cp $THIS_MODULE_DIR/lib/*:$THIS_MODULE_DIR/*\
	 edu.brown.cs.zkbenchmark.ZooKeeperBenchmark --conf $BENCHCONF
